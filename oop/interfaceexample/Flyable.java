package eighthtask.oop.interfaceexample;

//  Интерфейс полностью сфокусирован на задаче предоставления обязательного набора методов, который класс обязан выполнить.

//  Интерфейсы могут содержать только объявления методов (абстрактные методы) и константы (статические и финальные переменные).
//  Все методы в интерфейсе по умолчанию являются публичными и абстрактными.
//  Интерфейсы не могут иметь конструкторов, так как они не могут быть инстанциированы.
//  Класс может реализовывать несколько интерфейсов, что позволяет обойти отсутствие множественного наследования в Java.
//  Начиная с Java 8, интерфейсы могут содержать статические и дефолтные (с реализацией) методы.

//  Когда использовать?
//  Абстрактный класс:
//  Используйте, если классы имеют общую реализацию (поведение), которую подклассы должны наследовать и при необходимости переопределять.
//  Например: общий базовый функционал, который разделяют близкородственные объекты.
//  Когда классы, которые наследуют этот абстрактный класс, логически связаны (например, все наследники — это разные виды животных: Кошка, Собака).

//  Интерфейс:
//  Используйте, если вам нужно задать контракт (набор методов), которые должны реализовать все классы.
//  Если нужно задать какой-то общий функционал, который могут реализовать сразу несколько разных классов.
//  Удобно для определения поведения, которое может быть общее для несвязанных объектов (например, Летать могут и Самолет, и Птица).
//  Когда вам нужно многократное наследование

//    Поля в интерфейсе всегда являются константами, даже если это не указано явно.
//    Поля автоматически имеют модификаторы public static final.

public interface Flyable {
    // Классы должны реализовать этот метод
    void fly();

    // Классы МОГУТ переопределить этот метод, но не обязаны
    default void land() {
        System.out.println("Я приземляюсь");
    }
}
