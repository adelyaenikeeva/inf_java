package eighthtask.oop.maininfo;

//  Класс — это шаблон для создания объектов, определяющий их состояние и поведение.
//  Класс включает в себя поля (атрибуты) и методы (функции).

//  Объект — это конкретная реализация класса. Объект создается с помощью ключевого слова new.

//  Атрибуты, или поля класса, представляют собой переменные, которые хранят состояние объекта.
//  Они могут иметь различные модификаторы доступа:
//  private: доступен только внутри класса
//  default (отсутствие модификатора): доступен внутри пакета
//  protected: доступен внутри пакета и для наследников класса (подклассах)
//  public: доступен отовсюду

//  Помимо стандартных модификаторов доступа, существуют и другие модификаторы:
//  static: используется для обозначения статических членов класса. Эти члены принадлежат классу, а не экземплярам.
//  final: обозначает, что класс не может быть унаследован, или поле не может быть изменено после инициализации.
//  abstract: используется для объявления абстрактного класса, который не может быть инстанцирован,
//  и для абстрактных методов, не имеющих реализации.

public class Person {
    public final String name;
    protected int age;
    String address;

//    Переменные, объявленные с модификатором static, принадлежат классу, а не конкретному объекту.
//    статическая переменная
    public static int count = 0;

//    Конструктор — это специальный метод, который вызывается при создании объекта класса.
//    Он имеет то же имя, что и класс, и не имеет возвращаемого типа.

//    Ключевое слово this используется для ссылки на текущий объект.
//    Оно особенно полезно, когда параметры метода или конструктора имеют те же имена, что и атрибуты класса.
    public Person(String name, int age) {
//      различение между параметром и полем класса
        this.name = name;
        this.age = age;
    }

//    Конструкторы могут перегружаться, то есть можно создавать несколько конструкторов с различными параметрами.
    //    перегрузка конструктора

//    public Person(int age) {
//        // Увеличиваем значение при создании объекта
//        count++;
//        this.name = "Unknown";
//        this.age = age;
//    }

    // Второй конструктор, который использует первый конструктор
    public Person(int age) {
        this("Unknown", age); // Устанавливаем имя по умолчанию
        // Увеличиваем значение при создании объекта
        count++;
    }

    //    Методы с модификатором static могут вызываться без создания экземпляра класса. Это позволяет вызывать их напрямую через имя класса.
    public static int getCount() {
        // Возвращаем общее количество созданных объектов
        return count;
    }

    public Person(String name, int age, String address) {
        this(name, age);
        this.address = address;
    }

    //    перегрузка конструктора
    public Person(String name) {
        this.name = name;
    }

//    Методы — это функции, которые определены внутри класса и могут работать с его атрибутами. Они также имеют модификаторы доступа.
    public void speak() {
        System.out.println("Привет, меня зовут " + name);
    }

//    Перегрузка методов — это возможность создавать несколько методов с одинаковым именем, но с различными параметрами
//    (разное количество или тип данных):
    public void speak(String hobby) {
        System.out.println("Привет, меня зовут " + name + ". Я увлекаюсь " + hobby + ".");
    }

    // Третий вариант метода speak с двумя параметрами
    public void speak(int yearsOfExperience, String profession) {
        System.out.println("Привет, меня зовут " + name + ". Мне " + age + " лет и работаю " + profession + " уже " + yearsOfExperience + " лет.");
    }

//    Метод toString(): переопределяется для представления объекта в виде строки.
//    Пример переопределения метода toString():
    @Override
    public String toString() {
        return "Person{" +
                "name='" + name + '\'' +
                ", age=" + age + '\'' +
                '}';
    }

    public void displayInfo() {
        System.out.printf("Name: %s \tAge: %d\n", name, age);
    }
}

