package eighthtask.oop;

public class Functions {
//    Определение метода:
//Метод в Java начинается с указания модификаторов доступа, таких как public, protected,
// private или пакетно-приватный (отсутствие модификатора).
//Далее следует возвращаемый тип метода. Если метод ничего не возвращает, используется ключевое слово void.
//Имя метода следует стандартным правилам именования: начинаться с маленькой буквы,
// а если имя состоит из нескольких слов, используют CamelCase (например, calculateSum).
//Список параметров метода должен быть заключён в круглые скобки (), даже если параметры отсутствуют.
//Тело метода заключается в фигурные скобки {}.

//    Модификаторы методов:
//static: Метод можно вызывать без создания экземпляра класса.
//final: Метод нельзя переопределить в потомках.
//abstract: Метод объявляется в абстрактном классе и должен быть реализован в подклассах.
//synchronized: Метод может быть выполнен только одним потоком одновременно.

//    Методы должны выполнять только одну задачу и не быть слишком длинными.
//Давайте методам имена, которые явно указывают на их функциональность.

//    Здесь public — это модификатор доступа, int — возвращаемый тип, sum — имя метода, а (int a, int b) — параметры метода.
//    public static void sum(int a, int b) {
//        int result = a + b;
//        System.out.println(result);
//    }

    public static int sum(int a, int b) {
        return a + b;
    }

    public static int sum() {
        int a = 5;
        int b = 6;
//        int result = a + b;
//        System.out.println(result);
        return a + b;
    }

    public static int[] returnArray(int size) {
        int[] array = new int[size];
        for (int i = 0; i < size; i++) {
            array[i] = i;
        }
        return array;
    }

    public int rectArea(int a, int b) {
        return a * b;
    }

    public static void main(String[] args) {

//        Первая версия метода принимает два параметра целочисленного типа int:
        sum(1,2);

//       Перегрузка метода sum
//       Вторая версия метода не принимает никаких параметров.
//       Эта версия метода использует заранее определенные значения для a и b и вычисляет их сумму.
        sum();


        Functions functions = new Functions();
        // по скольку функция rectArea не статическая, нужно создавать экзмепляр класса, для вызова
        int rect3 = functions.rectArea(2,3);
        System.out.println(rect3);
    }
}
