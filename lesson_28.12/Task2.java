package SeventhTasks;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

//2.	Создайте регулярное выражение для поиска телефонных номеров в формате (123) 456-7890 или 123-456-7890.
// Напишите код, который находит и выводит все такие номера из текста.

//\\(? указывает на не обязательные круглые скобки перед первыми тремя цифрами. Символ ? означает, что символ перед ним допускается 0 или 1 раз.
//\\d{3} соответствует трем цифрам от 0 до 9.
//\\)? указывает на не обязательную закрывающую круглую скобку.
//[- ]? соответствует символу дефиса - или пробелу (либо тому, либо другому), который может также отсутствовать.
//\\d{3} снова соответствует трем цифрам.
//[- ]? опять соответствует символу дефиса - или пробелу.
//\\d{4} соответствует четырем цифрам, завершая номер.
public class Task2 {
    public static void main(String[] args) {
        String regex = "\\(?\\d{3}\\)?[- ]?\\d{3}[- ]?\\d{4}";
        Pattern pattern = Pattern.compile(regex);

        String[] testStrings = {
                "(123) 456-7890",
                "123-456-7890",
                "123 456 7890",
                "123 4567 890",
                "456789012",
                "(987) 654-3210"
        };

        for (String test : testStrings) {
            Matcher matcher = pattern.matcher(test);

            while (matcher.find()) {
                System.out.println(matcher.group());
            }
        }

        String text = "Здесь есть номера: (123) 456-7890 и 987-654-3210. Еще (321) 4123-4567 и 555-555-5555.";

        Matcher matcher = pattern.matcher(text);

        System.out.println("\nНайдены телефонные номера:");
        while (matcher.find()) {
            System.out.println(matcher.group());
        }
    }
}
